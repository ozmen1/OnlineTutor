// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineTutor.Data.Concrete.EfCore.Contexts;

#nullable disable

namespace OnlineTutor.Data.Migrations
{
    [DbContext(typeof(OnlineTutorContext))]
    [Migration("20230125195245_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "55dc4a34-a463-46b2-8fb3-e97a76f70cfc",
                            RoleId = "7e1d8351-f067-45d7-bc13-aa14e44db64a"
                        },
                        new
                        {
                            UserId = "86c02fd2-67c2-4a94-8113-a751bfe9f71f",
                            RoleId = "50029d51-368b-4b8d-9b07-b1d600440192"
                        },
                        new
                        {
                            UserId = "dc4ac19a-431c-40f1-a2df-cd49869e3559",
                            RoleId = "90dac613-5a72-4bd7-8db9-dd53914a3fe9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bu bir açıklamadır.",
                            Name = "Lise",
                            Url = "lise"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bu bir açıklamadır.",
                            Name = "İlköğretim",
                            Url = "ilkogretim"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bu bir açıklamadır.",
                            Name = "Yazılım",
                            Url = "yazilim"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Bu bir açıklamadır.",
                            Name = "Üniversite",
                            Url = "universite"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Point")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "Mükemmel bir eğitimci.",
                            Point = (byte)0,
                            StudentId = "86c02fd2-67c2-4a94-8113-a751bfe9f71f",
                            TeacherId = "dc4ac19a-431c-40f1-a2df-cd49869e3559",
                            Url = "comment-1"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7e1d8351-f067-45d7-bc13-aa14e44db64a",
                            Description = "Admin Rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "50029d51-368b-4b8d-9b07-b1d600440192",
                            Description = "Student Rolü",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "90dac613-5a72-4bd7-8db9-dd53914a3fe9",
                            Description = "Teacher Rolü",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "55dc4a34-a463-46b2-8fb3-e97a76f70cfc",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "61e8d569-0ba2-42b1-bdf7-b27cc5474c13",
                            CreatedDate = new DateTime(2023, 1, 25, 22, 52, 44, 982, DateTimeKind.Local).AddTicks(7332),
                            DateOfBirth = new DateTime(1998, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "AdminAd",
                            Gender = "Erkek",
                            IsApproved = false,
                            IsDeleted = false,
                            LastName = "AdminSoyad",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCXcesIPb2R/AzECnONfYMHPHW36+41UqeHA51UV4RZJBsNanv/vQuoeumpJNudRg==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b2d8b33-098f-4f15-ada4-ed9a921ebfd3",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Expectations")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResponseTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShowCardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShowCardId");

                    b.HasIndex("StudentId");

                    b.ToTable("Requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNumber = "0555-555-55-55",
                            Expectations = "Kalkülüs dersi için 5 saatlik özel ders",
                            ResponseTime = new DateTime(2023, 1, 25, 22, 52, 45, 343, DateTimeKind.Local).AddTicks(1507),
                            ShowCardId = 1,
                            StudentId = "86c02fd2-67c2-4a94-8113-a751bfe9f71f"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.ShowCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ShowCards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lise, Üniversite matematik dersleri verilir.",
                            IsHome = true,
                            Price = 100m,
                            TeacherId = "dc4ac19a-431c-40f1-a2df-cd49869e3559",
                            Title = "Online Matematik Dersi",
                            Url = "ozel-ders-1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "İngilizce anadilli hocadan ingilizce dersleri.",
                            IsHome = false,
                            Price = 100m,
                            TeacherId = "dc4ac19a-431c-40f1-a2df-cd49869e3559",
                            Title = "Online İngilizce Dersi",
                            Url = "ozel-ders-ing"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bu bir açıklamadır.",
                            Name = "Matematik",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bu bir açıklamadır.",
                            Name = "Fizik",
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bu bir açıklamadır.",
                            Name = "Kimya",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Bu bir açıklamadır.",
                            Name = "C#",
                            Url = "c#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Bu bir açıklamadır.",
                            Name = "Javascript",
                            Url = "javascript"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Bu bir açıklamadır.",
                            Name = "Makine Mühendisliği",
                            Url = "makine-muhendisligi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Bu bir açıklamadır.",
                            Name = "Bilgisayar Mühendisliği",
                            Url = "bilgisayar-muhendisligi"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Bu bir açıklamadır.",
                            Name = "Hayat Bilgisi",
                            Url = "hayat-bilgisi"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Bu bir açıklamadır.",
                            Name = "İngilizce",
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Bu bir açıklamadır.",
                            Name = "DotNET",
                            Url = "dotnet"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.SubjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("SubjectId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubjectCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            SubjectId = 9
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.SubjectCategoryShowCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShowCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("SubjectCategoryId", "ShowCardId");

                    b.HasIndex("ShowCardId");

                    b.ToTable("SubjectCategoryShowCards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShowCardId = 1,
                            SubjectCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            ShowCardId = 2,
                            SubjectCategoryId = 2
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Student", b =>
                {
                    b.HasBaseType("OnlineTutor.Entity.Concrete.Identity.User");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "86c02fd2-67c2-4a94-8113-a751bfe9f71f",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "d666ad9d-3780-499b-a91c-3253a1b1d774",
                            CreatedDate = new DateTime(2023, 1, 25, 22, 52, 44, 982, DateTimeKind.Local).AddTicks(7394),
                            DateOfBirth = new DateTime(1985, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "OgrenciAd",
                            Gender = "Erkek",
                            IsApproved = false,
                            IsDeleted = false,
                            LastName = "OgrenciSoyad",
                            LockoutEnabled = false,
                            NormalizedEmail = "OGRENCI@GMAIL.COM",
                            NormalizedUserName = "OGRENCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEMD6r5X/sO9lWgx6jOBFiSnHJJIISNHQXOxF55qkQgOqTSHfkXMlUKitAQcfQtrjew==",
                            PhoneNumber = "4444444444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5afaa94-ccef-487d-bb16-39ddb00486d2",
                            TwoFactorEnabled = false,
                            UserName = "ogrenci"
                        });
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Teacher", b =>
                {
                    b.HasBaseType("OnlineTutor.Entity.Concrete.Identity.User");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseRange")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherInfo")
                        .HasColumnType("TEXT");

                    b.Property<byte>("TeacherPoint")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dc4ac19a-431c-40f1-a2df-cd49869e3559",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "15726b63-c5c4-4291-9305-a53e7b025f7c",
                            CreatedDate = new DateTime(2023, 1, 25, 22, 52, 44, 982, DateTimeKind.Local).AddTicks(7476),
                            DateOfBirth = new DateTime(1985, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teacher@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "OgretmenAd",
                            Gender = "Erkek",
                            IsApproved = false,
                            IsDeleted = false,
                            LastName = "OgretmenSoyad",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@GMAIL.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMlDiZ7HQOY26CBsv9egjoJSCYcfE+j1GqRxxEtQ8oqvimDzugVLC5vYwyYvJU5Og==",
                            PhoneNumber = "3333333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa78aae0-58b1-42fd-a2ec-66cf53e97e29",
                            TwoFactorEnabled = false,
                            UserName = "teacher",
                            TeacherPoint = (byte)0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Comment", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("StudentId");

                    b.HasOne("OnlineTutor.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Comments")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Request", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.ShowCard", "ShowCard")
                        .WithMany("Requests")
                        .HasForeignKey("ShowCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineTutor.Entity.Concrete.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId");

                    b.Navigation("ShowCard");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.ShowCard", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("ShowCards")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.SubjectCategory", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Category", "Category")
                        .WithMany("SubjectCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineTutor.Entity.Concrete.Subject", "Subject")
                        .WithMany("SubjectCategories")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.SubjectCategoryShowCard", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.ShowCard", "ShowCard")
                        .WithMany("SubjectCategoryShowCards")
                        .HasForeignKey("ShowCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineTutor.Entity.Concrete.SubjectCategory", "SubjectCategory")
                        .WithMany("SubjectCategoryShowCards")
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShowCard");

                    b.Navigation("SubjectCategory");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Student", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineTutor.Entity.Concrete.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OnlineTutor.Entity.Concrete.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineTutor.Entity.Concrete.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Category", b =>
                {
                    b.Navigation("SubjectCategories");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.ShowCard", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("SubjectCategoryShowCards");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Subject", b =>
                {
                    b.Navigation("SubjectCategories");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.SubjectCategory", b =>
                {
                    b.Navigation("SubjectCategoryShowCards");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("OnlineTutor.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ShowCards");
                });
#pragma warning restore 612, 618
        }
    }
}
